import asyncio

from datetime import datetime, timedelta
from aiogram import Bot
from asgiref.sync import sync_to_async

from tg_bot.constants import INACTIVE_DAYS_FOR_MESSAGE, NOTIFICATION_PERIOD
from users.models import BotUser


async def send_reminders(bot: Bot):
    """The function of sending messages to inactive users."""
    while True:
        try:
            inactive_days_ago = (
                datetime.now() - timedelta(days=INACTIVE_DAYS_FOR_MESSAGE)
            )

            inactive_users = await sync_to_async(list)(
                BotUser.objects.filter(
                    last_active__lte=inactive_days_ago,
                    is_active=True)
            )

            for user in inactive_users:
                today = datetime.now().date()
                days_inactive = (today - user.last_active.date()).days
                if days_inactive % INACTIVE_DAYS_FOR_MESSAGE == 0:
                    await bot.send_message(
                        chat_id=user.telegram_id,
                        text="–ú—ã –ø–æ –≤–∞–º —Å–∫—É—á–∞–µ–º! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –∫ –Ω–∞–º, —É –Ω–∞—Å –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ üòä"
                    )
            await asyncio.sleep(NOTIFICATION_PERIOD)

        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}')
